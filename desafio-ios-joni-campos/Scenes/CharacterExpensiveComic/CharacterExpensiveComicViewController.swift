//
//  CharacterExpensiveComicViewController.swift
//  desafio-ios-joni-campos
//
//  Created by Joni de Campos on 15/04/20.
//  Copyright (c) 2020 Joni de Campos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Foundation
import Kingfisher

protocol CharacterExpensiveComicDisplayLogic: class
{
  func displaySomething(viewModel: CharacterExpensiveComic.Something.ViewModel)
}

class CharacterExpensiveComicViewController: UIViewController, CharacterExpensiveComicDisplayLogic{
    
    @IBOutlet weak var expensiveImage: UIImageView!
    @IBOutlet weak var expensiveName: UILabel!
    @IBOutlet weak var expensiveValue: UILabel!
    @IBOutlet weak var expensiveDescription: UILabel!
    
    
    var interactor: CharacterExpensiveComicBusinessLogic?
  var router: (NSObjectProtocol & CharacterExpensiveComicRoutingLogic & CharacterExpensiveComicDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = CharacterExpensiveComicInteractor()
    let presenter = CharacterExpensiveComicPresenter()
    let router = CharacterExpensiveComicRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
//  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
//  {
//    if let scene = segue.identifier {
//      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
//      if let router = router, router.responds(to: selector) {
//        router.perform(selector, with: segue)
//      }
//    }
//  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    doSomething()
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething()
  {
    let request = CharacterExpensiveComic.Something.Request()
    interactor?.doSomething(request: request)
  }
  
     
    
  func displaySomething(viewModel: CharacterExpensiveComic.Something.ViewModel)
  {
    

    let results = (viewModel.oExpensive.resultado.data?.results)!
    let mostExpensiveComic = getExpensiveComic(results: results)
    
    let mostExpensiveComicPrice = mostExpensiveComic.prices![0].price
    
    expensiveValue.text = "$" + (mostExpensiveComicPrice?.description ?? "")
    
    let mostExpensiveComicDescription = mostExpensiveComic.description
    
    expensiveDescription.text = mostExpensiveComicDescription
    
    let mostExpensiveComicTitle = mostExpensiveComic.title
    expensiveName.text = mostExpensiveComicTitle
    
    
    let mostExpensiveComicImagePath = (mostExpensiveComic.thumbnail?.path ?? "") + "." + (mostExpensiveComic.thumbnail?.thumbnailExtension ?? "")
    
    
    
    // using Kingfisher
    let url = URL(string: mostExpensiveComicImagePath)
    
    
    let processor = RoundCornerImageProcessor(cornerRadius: 20)
    expensiveImage.kf.indicatorType = .activity
    expensiveImage.kf.setImage(with: url, options: [.processor(processor)])
  
    
    
    
    
    
    
    
    
    
    
    }
    
    
    func getExpensiveComic(results: [CharacterComicsResult] ) -> CharacterComicsResult {
        
         //var model: [CharacterComicsResult]?
        
        
        
        
        var expensive: CharacterComicsResult!
        var value: Double = 0
        for comic in results {
            if comic.prices?.first?.price ?? 0 > value {
                value = comic.prices?.first?.price ?? 0
                expensive = comic
            }
        }
        return expensive
    }
    
    
    
}
