//
//  ListCharactersModels.swift
//  desafio-ios-joni-campos
//
//  Created by Joni de Campos on 15/04/20.
//  Copyright (c) 2020 Joni de Campos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Foundation

enum ListCharacters
{
  // MARK: Use cases
  
  enum Something
  {
    struct Request
    {
    }
    struct Response
    {
        var resultado: CharacterDataWrapper
    }
    struct ViewModel
    {
        var oCharacters: ListCharacters.Something.Response
    }
  }
}
import Foundation
import UIKit

//MARK: -

struct MyCharacters {
    //static var pedidosWix = [Pedidos]()
  // static var listCharacters = CharacterDataWrapper()
}

// MARK: - Character
struct CharacterDataWrapper: Decodable{
    let code: Int?
    let status: String?
    let copyright: String?
    let attributionText: String?
    let attributionHTML: String?
    let data: CharacterDataContainer?
    let etag: String?
    
}

//MARK: - CharacterDataContainerClass
struct CharacterDataContainer: Decodable{
    let offset: Int?
    let limit: Int?
    let total: Int?
    let count: Int?
    let characters: [Character]?
    
    private enum CodingKeys: String, CodingKey {
        case offset = "offset"
        case limit = "limit"
        case total = "total"
        case count = "count"
        case characters = "results"
    }
    

}

//MARK: - Result

struct Character: Decodable{
    let id: Int?
    let name: String?
    let description: String?
    let modified: Date?
    let resourceURI: String?
    let urls: [URLElement]?
    let thumbnail: Thumbnail?
    let comics: Comics?
    let stories: Stories?
    let events: Comics?
    let series: Comics?
    
    
}



// MARK: - URLElement
struct URLElement: Decodable {
    let type: String?
    let url: String?
}

 enum URLType: String, Decodable {
    case comiclink = "comiclink"
    case detail = "detail"
    case wiki = "wiki"
}


// MARK: - Thumbnail
struct Thumbnail: Decodable {
    let path: String?
    let thumbnailExtension: String?

    enum CodingKeys: String, CodingKey {
        case path
        case thumbnailExtension = "extension"
    }
}

enum Extension: String, Decodable {
    case gif = "gif"
    case jpg = "jpg"
}


// MARK: - Comics
struct Comics: Decodable {
    let available: Int?
    let collectionURI: String?
    let items: [ComicsItem]?
    let returned: Int?
}

// MARK: - ComicsItem
struct ComicsItem: Decodable {
    let resourceURI: String?
    let name: String?
}


// MARK: - Stories
struct Stories: Decodable {
    let available: Int?
    let collectionURI: String?
    let items: [StoriesItem]?
    let returned: Int?
}

// MARK: - StoriesItem
struct StoriesItem: Decodable {
    let resourceURI: String?
    let name: String?
    let type: String?
}








//MARK: - lista de pedidos

struct WebSiteDescription:Decodable{
    let name: String
    let description: String
    let courses: [Course]
}


struct Course: Decodable{
    let id: Int
    let name: String
    let link: String
    let imageUrl: String
}

struct PedidosWix:Decodable{
    let pedidos: [Pedidos]
}


struct MyVariables {
    //static var pedidosWix = [Pedidos]()
    static var pedidosWix = [Pedidos]()
}

// para testar os pedidos do WIx lista todos os pedidos
struct Pedidos:Decodable{
    let _id :String?
    let codigoProduto:String?
    let statusIntegracao:String?
    let nomeCliente:String?
    let pedidoDate:String?
    let statusPagamento:String?
    let statusPedido:String?
    let resultadoPagamento:String?
    let amount:String?
    let currency:String?
    let pagamento_ID:String?
    let categoria:String?
    let produt_ID:String?
    let precoProduto:String?
    let quantidadeProduto:String?
    let paisComprador:String?
    let emailComprador:String?
    let nomeComprador:String?
    let sobreNomeComprador:String?
    let telefoneComprador:String?
    let nomeProduto:String?
    let statusProcessamento:String?
    let enderecoEntrega:String?
    let complementoEntrega:String?
    let cidadeEntrega:String?
    let estadoEntrega:String?
    let cpfcnpjEntrega:String?
    let cepEntrega:String?
    let telefoneEntrega:String?
    let dataPrevisaoEntrega:String?
    let statusPedidoCliente:String?
    let dataEntregacliente:String?
    let transportadorPedidoID:String?
    let dataLiberacaoConteudo:String?
    let responsavelProducao:String?
    let flagEmailLiberacao:String?
    let origemPedido:String?
    let pedido_ID:String?
    
    
    
}
